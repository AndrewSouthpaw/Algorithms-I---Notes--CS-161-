Week 4





=====================================================================
Section 10 - Graph Search and Connectivity
=====================================================================


/////////////////////////////////////////////////////////////////////
10.1 - Graph Search Overview
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Motivations
=======================================
1. Check if network is connected
  	 Bacon Number
2. Driving directions
3. Formulate plan (e.g. how to fill a Sudoku puzzle)
	- nodes = partially completed puzzle, arcs = filling in one new square
4. Compute the "pieces" (or "components") of a graph
	- clustering, structure of the web graph, etc.



Goals:
	1. find everything findable from start vertex
	2. don't explore anything twice  O(m+n) time

Generic algorithm (Graph G, vertex s):
	- initially s explored, other vertices unexplored
	- while possible:
		- choose edge (u,v) with u explored and v unexplored (if none, halt)
		- mark v explored



Claim: at end of algorithm, v explored <=> G has path s -> v
Proof: (=>) easy induction on number of iterations
	   (<=) By contradiction. Suppose G has path p from s to v. But, we say
	        v unexplored at end of algorithm. Then t.e. edge (u,v) in P with
	        u explored and w unexplored. But then algorithm would not have
	        terminated, contradiction. QED.






BFS v. DFS
=======================================

Many question: how to choose among possibly many "frontier" edges?

Breadth-First Search (BFS)
	- explore nodes in "layers"
	- can compute shortest paths
	- can compute connected components of undirected graph
	- O(m+n) time using queue


Depth-First Search (DFS)
	- explore aggressively like a maze, backtrack when necessary
	- compute topological ordering of directed acyclic graph
	- compute connected components in directed graphs 
	- O(m+n) using stack (or via recursion)







/////////////////////////////////////////////////////////////////////
10.2 - Breadth-First Search
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


BFS(graph G, start vertex s)
[all nodes initially unexplored]
- mark s as explored
- let Q = queue data structure, initialize with s
- while Q != 0:
	- remove the first node of Q, call it v
	- for each edge (v,w):
		- if w unexplored
			- mark w as explored
			- add w to Q at the end


Claim #1: at end of BFS, v explored <=> G has path from s to v
Reason: special case of generic algorithm

Claim #2: running time of main while loop = O(n_s + m_s), where
											n_s = # nodes reachable from s
											m_s = # edges reachable from s













/////////////////////////////////////////////////////////////////////
10.3 - BFS and Shortest Path
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Goal: compute dist(v), the fewest # edges on path from s to v
Extra code: initialize dist(v) = { 0 	if v = s
								  +INF	if v != s  (will revise on running)
- when considering edge (v,w):
	- if w unexplored, set dist(w) = dist(v) + 1
	
Claim: at termination, dist(v) = i <=> v in ith layer 
Proof idea: each layer i node w is added to Q by a layer (i-1) node v via
			the edge (v,w)









/////////////////////////////////////////////////////////////////////
10.4 - BFS and Undirected Connectivity
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Let G = (V,E) be an undirected graph.
Connected components = the "pieces" of G
Formal definition: equivalence classes of the relation u ~ v <=>  t.e. u-v
				   path in G. (~ is an equivalence relation)
	Equivalence relations:
		1. reflexive (path to itself)
		2. symmetrical (u-v == v-u)
		3. transitive (u-v, v-w, then u-w)

Goal: compute all connected components
Why? - check if network disconnected
	 - graph visualization
	 - clustering



Algorithm
=======================================

- all nodes unexplored
[assume labeled 1 to n]
- for i = 1 to n
	- if i not yet explored	
		- BFS(G,i)  // discovers i's connected components


Note: finds every connected component
Running time: O(m+n)	O(1) per node, O(1) per edge in each BFS












/////////////////////////////////////////////////////////////////////
10.5 - Depth-First Search (The Basics)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Advantages over BFS:
- computes topological ordering of directed acyclic graph
- computers strongly connected components of directed graphs



Recursive version:
DFS (graph G, start vertex s)
- mark s explored
- for every edge (s,v):
	- if v unexplored
		- DFS(g,v)


Claim #1: at end, v marked explored <=> t.e. path s to v in G
Reason: instantiation of generic search procedure

Claim #2: running time O(n_s + m_s)
Reason: look at each node in connected component of s at most once, each
		edge at most twice













/////////////////////////////////////////////////////////////////////
10.6 - Topological Sort
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Toplogical ordering of directed graph G is labeling f of G's nodes s.t.:
1. f(v)'s are the set {1, 2, ...,n}
2. (u,v) in G => f(u) < f(v)

Motivation: sequence tasks respecting precedence constraints
Note: G has directed cycle => no topological ordering
Theorem: no directed cycle => can compute topo ordering in O(m+n) time

Note: Every directed acyclic graph has a sink vertex
Reason: if not, can keep following outgoing arcs to produce directed cycle

Straightforward algorithm:
- let v be sink vertex of G
- set f(v) = n
- recurse on G-{v}

Why does it work:
	When v is assigned position i, all outgoing arcs already deleted =>
	all lead to later vertices in ordering. 



Topological Sort via DFS
=======================================
DFS(graph G, start vertex s)
- mark s explored
- for every edge (s,v):		// vertices considered in arbitrary order
	- if v not yet explored:
		- DFS(G,v)
- set f(s) = current_label
- current_label--;
		
DFS-Loop(graph G)
- mark all nodes unexplored
- current_label = n		// to keep track of ordering f values
- for each vertex v in G:
	- if v not yet explored 	// in some previous DFS call
		- DFS(G,v)



Running time: O(m+n).
Reason: O(1) time per node, O(1) time per edge
Correctness: show that if (u,v) is edge, then f(u) < f(v)
Case 1: u visited by DFS before v
	v will get explored. recursive call to v finishes before u. Thus, 
	it will be assigned larger label.
Case 2: v visited before u
	u will not get explored b/c no directed cycles. v's recursive call finishes
	before u's starts => f(v) > f(u)  QED














/////////////////////////////////////////////////////////////////////
10.7 - Computing Strong Components - The Algorithm
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Definition: strongly connected components (SCCs) of directed graph G
are the equivalence classes of relation u~v <=> t.e path u->v AND
a path v->u in G



Kosaraju's Two-Pass Algorithm
=======================================
(given directed graph G)
1. Let G_rev = G with all arcs reversed
2. run DFS-Loop on G_rev	// compute "magical ordering" of nodes
		// let f(v) = "finishing time" of each v in V
3. run DFS-Loop on G	// discover SCCs one-by-one
		// processing nodes in decreasing order of finishing times
		// [SCCs = nodes with same "leader"]

Running time: 2 * DFS = O(m + n)




The 1st pass
=======================================
DFS-Loop(graph G)
	global variable t = 0 	// for finishing times in 1st pass
	[# of nodes processed so far]
	global variable s = NULL // for leaders in 2nd pass
	[current source vertex]
	Assume nodes labeled 1 to n
	for i = n down to 1
		if i not yet explored
			s := i
			DFS(G,i)

DFS(graph G, node i)
	- mark i as explored	// for rest of DFS-loop
	- set leader(i) := node s
	- for each arc (i,j) in G:
		- if j not yet explored:
			- DFS(G,j)
	- t++
	- set f(i) := t		// i's finishing time



The 2nd pass
=======================================
Nodes change names from original to their new finishing time:
	node i = f(i)

Leader node 9 = nodes found starting from node 9




















/////////////////////////////////////////////////////////////////////
10.8 - Computing Strong Components - The Analysis
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Claim: SCCs of directed graph induce acyclci "metagraph"
	- meta-nodes = the SCCs
		C_1,...,C_k
	- t.e. arc C->C_hat <=> t.e. arc (i,j) in G
		with i in C, j in C_hat
Why acyclic: a cycle of SCCs would collapse into one
SCC of original graph G and G_rev are exactly the same.

Lemma:
	consider two "adjacent" SCCs in G:
	Let f(v) = finishing times of DFS-Loop in G_rev
	Then: max(v in C_1){f(v)} < max(v in C_2){f(v)} <-- assume true for now

Corollary:
	maximum f-value of G must lie in a "sink SCC"
	2nd pass of DFS-Loop begins somewhere in sink SCC C*
	first call to DFS discovers C* and nothing else
	rest of DFS-Loop like recursing on G with C* deleted
	successive calls to DFS(G,i) "peel off" SCCs one by one
	
	
Proving the assumption:
in G_rev, C_2 -> C_1 
Let v = 1st node of C1 u C2 reached by 1st pass of DFS-Loop on G_rev
Case 1 [v in C_1]:
	all of C_1 explored before C_2 reached
	Reason: no paths from C_1 to C_2 since meta-graph is acyclic)
Case 2 [v in C_2]:
	DFS(G_rev, v) won't finish until all of C_1 u C_2 completely explored.
	Because C_1 is findable from C_2, all of C_1 gets explored before C_2.
	f(v) > f(w) for all w in C_1
	















/////////////////////////////////////////////////////////////////////
10.9 - Structure of the Web [Optional]
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

- vertices = web pages
- (directed) edges = hyperlinks

Question: what does the web graph look like? (assume you've already "crawled" it)
Size ~= 200 million nodes, ~= 1 billion edges in 2000
Reference: Broder et al. WWW 2000 
	computed the SCCs of the web graph. (pre Map-Reduce / Hadoop)
	
Sort of looks like a bow tie...
		
		
					  giant
					   SCC                         out region
					"core of             small SCCs reachable
					 the web"                      from giant
                                        (corporate web sites)
in:
SCCs that can reach
giant SCC, but can't
be reached (new web pages)



1. all 4 parts (giant, in, out, tubes & tendrils) have roughly same size
2. within CORE, very well connected ("small world" property [Milgram])
									gave rise to "6 degrees of separation"
3. outside, surprisingly poorly connected



Modern web research
1. temporal aspects - how does web graph evolve over time
2. informational aspects - how does new info propagate
3. finer-grained structure - how to define and compute "communities" in
   information and social networks

Recommended reading: Easley + Kleinberg, "Networks, Crowds, and Markets"
































