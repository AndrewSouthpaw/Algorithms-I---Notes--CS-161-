Week 4





=====================================================================
Section 10 - Graph Search and Connectivity
=====================================================================


/////////////////////////////////////////////////////////////////////
10.1 - Graph Search Overview
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Motivations
=======================================
1. Check if network is connected
  	 Bacon Number
2. Driving directions
3. Formulate plan (e.g. how to fill a Sudoku puzzle)
	- nodes = partially completed puzzle, arcs = filling in one new square
4. Compute the "pieces" (or "components") of a graph
	- clustering, structure of the web graph, etc.



Goals:
	1. find everything findable from start vertex
	2. don't explore anything twice  O(m+n) time

Generic algorithm (Graph G, vertex s):
	- initially s explored, other vertices unexplored
	- while possible:
		- choose edge (u,v) with u explored and v unexplored (if none, halt)
		- mark v explored



Claim: at end of algorithm, v explored <=> G has path s -> v
Proof: (=>) easy induction on number of iterations
	   (<=) By contradiction. Suppose G has path p from s to v. But, we say
	        v unexplored at end of algorithm. Then t.e. edge (u,v) in P with
	        u explored and w unexplored. But then algorithm would not have
	        terminated, contradiction. QED.






BFS v. DFS
=======================================

Many question: how to choose among possibly many "frontier" edges?

Breadth-First Search (BFS)
	- explore nodes in "layers"
	- can compute shortest paths
	- can compute connected components of undirected graph
	- O(m+n) time using queue


Depth-First Search (DFS)
	- explore aggressively like a maze, backtrack when necessary
	- compute topological ordering of directed acyclic graph
	- compute connected components in directed graphs 
	- O(m+n) using stack (or via recursion)







/////////////////////////////////////////////////////////////////////
10.2 - Breadth-First Search
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


BFS(graph G, start vertex s)
[all nodes initially unexplored]
- mark s as explored
- let Q = queue data structure, initialize with s
- while Q != 0:
	- remove the first node of Q, call it v
	- for each edge (v,w):
		- if w unexplored
			- mark w as explored
			- add w to Q at the end


Claim #1: at end of BFS, v explored <=> G has path from s to v
Reason: special case of generic algorithm

Claim #2: running time of main while loop = O(n_s + m_s), where
											n_s = # nodes reachable from s
											m_s = # edges reachable from s













/////////////////////////////////////////////////////////////////////
10.3 - BFS and Shortest Path
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


Goal: compute dist(v), the fewest # edges on path from s to v
Extra code: initialize dist(v) = { 0 	if v = s
								  +INF	if v != s  (will revise on running)
- when considering edge (v,w):
	- if w unexplored, set dist(w) = dist(v) + 1
	
Claim: at termination, dist(v) = i <=> v in ith layer 
Proof idea: each layer i node w is added to Q by a layer (i-1) node v via
			the edge (v,w)









/////////////////////////////////////////////////////////////////////
10.4 - BFS and Undirected Connectivity
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Let G = (V,E) be an undirected graph.
Connected components = the "pieces" of G
Formal definition: equivalence classes of the relation u ~ v <=>  t.e. u-v
				   path in G. (~ is an equivalence relation)
	Equivalence relations:
		1. reflexive (path to itself)
		2. symmetrical (u-v == v-u)
		3. transitive (u-v, v-w, then u-w)

Goal: compute all connected components
Why? - check if network disconnected
	 - graph visualization
	 - clustering



Algorithm
=======================================

- all nodes unexplored
[assume labeled 1 to n]
- for i = 1 to n
	- if i not yet explored	
		- BFS(G,i)  // discovers i's connected components


Note: finds every connected component
Running time: O(m+n)	O(1) per node, O(1) per edge in each BFS












/////////////////////////////////////////////////////////////////////
10.5 - Depth-First Search (The Basics)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\






















































